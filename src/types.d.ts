// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}
interface FileAPI {
  openFile: () => Promise<{ fileName: string; content: string } | null>;
  saveFile: (fileName: string, content: string) => Promise<boolean>;
}

interface FFmpegProgress {
  frame: number;
  fps: number;
  time: string;
  bitrate: string;
  speed: string;
  percentage: number;
  eta: string | null;
}

type LogType = "info" | "success" | "warning" | "error" | "debug" | "metadata";

interface FFmpegStartParams {
  videoPath: string;
  subtitlePath: string;
  outputPath: string;
  settings?: {
    bitrate: string;
    useHardwareAccel: boolean;
  };
}

interface FFmpegDownloadProgress {
  downloadedBytes: number;
  totalBytes: number;
  percentage: number;
  status: "downloading" | "extracting" | "complete" | "error";
  message?: string;
}

interface FFmpegAPI {
  selectVideoFile: () => Promise<{ filePath: string; fileName: string } | null>;
  selectSubtitleFile: () => Promise<{ filePath: string; fileName: string } | null>;
  selectOutputPath: (defaultName: string) => Promise<string | null>;
  startProcess: (params: FFmpegStartParams) => Promise<{ success: boolean }>;
  cancelProcess: () => Promise<{ success: boolean; message?: string }>;
  checkGpu: () => Promise<{ available: boolean; info: string }>;
  openOutputFolder: (filePath: string) => Promise<{ success: boolean; error?: string }>;
  onProgress: (callback: (progress: FFmpegProgress) => void) => () => void;
  onLog: (callback: (data: { log: string; type: LogType }) => void) => () => void;
  onComplete: (callback: (outputPath: string) => void) => () => void;
  onError: (callback: (error: string) => void) => () => void;
  // FFmpeg Download
  checkInstalled: () => Promise<{ installed: boolean }>;
  startDownload: () => Promise<{ success: boolean }>;
  onDownloadProgress: (callback: (progress: FFmpegDownloadProgress) => void) => () => void;
  onDownloadComplete: (callback: () => void) => () => void;
  onDownloadError: (callback: (error: string) => void) => () => void;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  fileAPI: FileAPI;
  ffmpegAPI: FFmpegAPI;
}
